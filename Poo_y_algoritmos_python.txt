INTRODUCION AL CURSO
    Objetivos:
        *Entender como funciona la programacion orientada a Objetos.
        *Entender como medir la eficiencia temporal y espacil de nuestros algoritmos.
        *Entender como y porque graficar
        *Aprender a resolvr problemas de busqueda, ordenacion y optimizacion.
PROGRAMACION ORIENTADA A OBJETOS 
    Uno de los elementos más importantes de los lenguajes de programación
    es la utilización de clases para organizar programas en módulos y abstracciones
    de datos.

    Las clases se pueden utilizar de muchas diversas maneras. Pero en este artículo
    hablaremos de cómo utilizarlas en el contexto de la programación orientada a objetos.
    La clave para entender la programación orientada a objetos es pensar en objetos
    como agrupaciones de datos y los métodos que operan en dichos datos.

    Por ejemplo, podemos representar a una persona con propiedades como nombre,
    edad, género, etc. y los comportamientos de dicha persona como caminar, cantar,
    comer, etc. De la misma manera podemos representar unos audífonos con propiedades
    como su marca, tamaño, color, etc. y sus comportamientos como reproducir música,
    pausar y avanzar a la siguiente canción.

    Puesto de otra manera, la programación orientada a objetos nos permite modelar
    cosas reales y concretas del mundo y sus relaciones con otros objetos.

    Las ideas detrás de la programación orientada a objetos tienen más de 50 años
    y han sido ampliamente aceptadas y practicadas en los últimos treinta. A
    mediados de la década de los setenta se comenzaron a escribir artículos académicos
    explicando los beneficios de esta aproximación a la programación. También durante
    esos años se comenzaron a escribir los primeros lenguajes de programación que
    incorporaban estas ideas (como Smalltalk y CLU). Pero no fue hasta la llegada
    de Java y C++ que la idea consiguió un número importante de seguidores.

    Hasta ahora, en el curso previo de esta serie
    hemos utilizado programación orientada a objetos de manera implícita. Cuando
    decimos "Los objetos son las principales cosas que un programa de Python
    manipula. Cada objeto tiene un tipo que define qué cosas puede realizar un
    programa con dicho objeto.", nos estamos refiriendo a las ideas principales
    de la programación orientada a objetos. Hemos utilizado los tipos lista y
    diccionario, entre muchos otros, así como los métodos asociados a dichos tipos.
    Así como los creadores de un lenguaje de programación sólo pueden diseñar una
    fracción muy pequeña de todas las funciones útiles (como abs, float, type,
    etc.), también pueden escribir una fracción muy pequeña de los tipos útiles
    (int, str, dict, list, etc.). Ya sabemos los mecanismos que nos
    permiten crear funciones, ahora veremos los mecanismos que nos permiten crear
    nuevos tipos (o clases).

    Clases en Python
    
        Las estructuras primitivas con las que hemos trabajado hasta ahora nos permiten
        definir cosas sencillas, como el costo de algo, el nombre de un usuario, las
        veces que debe correr un bucle, etc. Sin embargo, existen ocasiones cuando
        necesitamos definir estructuras más complejas, por ejemplo un hotel. Podríamos
        utilizar dos listas: una para definir los cuartos y una segunda para definir
        si el cuarto se encuentra ocupado o no.

            cuartos_de_hotel = [101, 102, 103, 201, 202, 203]
            cuarto_ocupado = [True, False, False, True, True, False]

        Sin embargo, este tipo de organización rápidamente se sale de control. ¿Qué
        tal que quisieramos añadir más propiedades, cómo si el cuarto ya fue aseado o
        no? ¿Si el cuarto tiene cama doble o sencilla? Esto nos lleva a una falta fuerte
        de organización y es justamente el punto que justifica la existencia de clases.

        Las clases nos permiten crear nuevos tipos que contiene información arbitraria
        sobre un objeto. En el caso del hotel, podríamos crear dos clases Hotel() y
        Cuarto() que nos permitiera dar seguimiento a las propiedades como número de
        cuartos, ocupación, aseo, tipo de habitación, etc.

        Es importante resaltar que las clases sólo proveen estructura. Son un molde con
        el cual podemos construir objetos específicos. La clase señala las propiedades
        que los hoteles que modelemos tendrán, pero no es ningún hotel específico. Para
        eso necesitamos las instancias.

    Instancias
        Mientras que las clases proveen la estructura, las instancias son los objetos
        reales que creamos en nuestro programa: un hotel llamado PlatziHotel o Hilton.
        Otra forma de pensarlo es que las clases son como un formulario y una vez que
        se llena cada copia del formulario tenemos las instancias que pertenecen a
        dicha clase. Cada copia puede tener datos distintos, al igual que cada instancia
        es distinta de las demás (aunque todas pertenecen a una misma clase).

        Para definir una clase, simplemente utilizamos el keyword class. Por ejemplo:

                class Hotel:
                    pass


        Una vez que tenemos una clase llamada Hotel podemos generar una instancia
        llamando al constructor de la clase.

                hotel = Hotel()


    Atributos de la instancia
    
        Todas las clases crean objetos y todos los objetos tienen atributos. Utilizamos
        el método especial __init__ para definir el estado inicial de nuestra instancia.
        Recibe como primer parámetro obligatorio self (que es simplemente una
        referencia a la instancia).

            class Hotel:
                
                def __init__(self, numero_maximo_de_huespedes, lugares_de_estacionamiento):
                    self.numero_maximo_de_huespedes = numero_maximo_de_huespedes
                    self.lugares_de_estacionamiento = lugares_de_estacionamiento
                    self.huespedes = 0


            hotel = Hotel(numero_maximo_de_huespedes=50, lugares_de_estacionamiento=20)
            print(hotel.lugares_de_estacionamiento) # 20

        Métodos de instancia
        Mientras que los atributos de la instancia describen lo que representa el
        objeto, los métodos de instancia nos indican qué podemos hacer con las
        instancias de dicha clase y normalmente operan en los mencionados atributos.
        Los métodos son equivalentes a funciones dentro de la definición de la clase,
        pero todos reciben self como primer argumento.

            class Hotel:

                ...

                def anadir_huespedes(self, cantidad_de_huespedes):
                    self.huespedes += cantidad_de_huespedes

                def checkout(self, cantidad_de_huespedes):
                    self.huespedes -= cantidad_de_huespedes

                def ocupacion_total(self):
                    return self.huespedes

            hotel = Hotel(50, 20)
            hotel.anadir_huespedes(3)
            hotel.checkout(1)
            hotel.ocupacion_total() # 2

        Ahora que ya sabemos qué son las clases y cómo las podemos utilizar en nuestros
        programas, platícanos qué clases te serían útiles para modelar en uno de tus
        programas.
TTPOS DE DATOS ABSTACTOS (LOS CREAMOS NOSOTROS))

    *En python todo es un objeto y tienen un tipo:
        Representacion de datos y formas de interactuar con ellos.
    * Formas de interactuar un objto:
        - Creacion
        - Manipulacion
        - Destruccion.
    * Ventas de los objetos.
        + Descompasicion
        + abstracciones
        + Encapsulacion
    * Intancias 
        * Mientras que la clase es un molde, los objetos creados 
          se les conoce como isntancias.
        * Cuando se crea una instancia, se ejecuta el metodo __init__
        * Todos los metodos de una clase reciben implicitamente como primer parameto self
        *Los atributos de clase nos permiten    
            +Representar datos
            + Procedimientos para interactuar con los metodos.
            + Mecanismos para esconder la representacion interna
        *Se accede a los atributos con la notacion de punto .
        * Puede tener atributos priados. Por convencion comiensan con _
Decomposicion   

    * Partir un problema en problemas mas pequeños
    * Las clases permiten crear mayores abstracciones en forma de componentes.
    * Cada clase se encarga de una parte del problema y el programa se vueve mas facil de mantener.
Abstraccion:
    *Enfocarnos en la informacion relevante.
    *Separar la informacion central de los detalles secundarios.
    *Podemos utilizar variables y metodos(privados o publicos)4
FUNCIONES: BASES DE LOS DECORADORES

    El concepto de decorador en Python es algo que podríamos ubicar en un nivel “intermedio” en el manejo 
    del lenguaje, por lo que es buena idea que tengas una base sólida del lenguaje, sobre todo en cuanto 
    funciones, al momento de profundizar e implementarlos.

    Los decoradores son una forma sencilla de llamar funciones de orden mayor, es decir, funciones que toman
    otra función cómo parámetro y/o retornan otra función como resultado. De esta forma un decorador añade 
    capacidades a una función sin modificarla.

    Un ejemplo de esto son las llantas de un automóvil si les colocas cadenas para la nieve: aún puede andar
    y además extiende su funcionalidad para conducirse en otros terrenos.

    RECORDANDO SOBRE FUNCIONES

        Antes de abordar el tema de decoradores haremos un pequeño repaso por las funciones, las cuales retornan un valor 
        ante la entrada de un argumento.

        Analicemos este sencillo ejemplo donde una función que multiplica un número que se eleva a la tercer potencia:

            def elevar_cubo(numero):
                return numero * numero * numero

        Si damos como argumento el número 3, entonces tendremos como salida el número 27 al ejecutar la función:

            >>> elevar_cubo(3)            
Funciones cómo objetos de primera-clase

    Otro concepto importante a tener en cuenta es que en Python las funciones son objetos de primera-clase, es decir,
    que pueden ser pasados y utilizados cómo argumentos al igual que cualquier otro objeto (strings, enteros, flotantes,
    listas, etc.).

    Veamos un ejemplo donde definimos 3 diferentes funciones que utilizaremos de manera conjunta:

        def presentarse(nombre):
            return f"Me llamo {nombre}"

        def estudiemos_juntos(nombre):
            return f"¡Hey {nombre}, aprendamos Python!"

        def consume_funciones(funcion_entrante):
            return funcion_entrante("David")
            
            
    Las primeras dos funciones son obvias en su resultado, donde nos mostrarán un mensaje con el valor de la variable nombre.
    La tercer función puede ser más compleja de predecir ya que toma una función cómo entrada y veamos que pasa cuando colocamos
    una función cómo atributo:

        >>> consume_funciones(presentarse)
        'Me llamo David'

        >>> consume_funciones(estudiemos_juntos)
        '¡Hey David, aprendamos Python!'

    Pongamos atención en cómo la función consume_funciones() se escribe con paréntesis para ser ejecutada, mientras que la función 
    presentarse y estudiemos_juntos para solo hacer referencia a estas.
Funciones anidadas

    Al igual que los condicionales y bucles también puedes colocar funciones dentro de otra función.
    Toma un minuto para analizar el siguiente código e inferir cual será el resultado de salida:

        def funcion_mayor():
            print("Esta es una función mayor y su mensaje de salida.")

            def librerias():
                print("Algunas librerías de Python son: Scikit-learn, NumPy y TensorFlow.")

            def frameworks():
                print("Algunos frameworks de Python son: Django, Dash y Flask.")

            frameworks()
            librerias()

    Si llamamos a la función funcion_mayor tendremos la siguiente salida:

        >>> funcion_mayor()
        Esta es una función mayor y su mensaje de salida.
        Algunos frameworks de Python son: Django, Dash y Flask.
        Algunas librerías de Python son: Scikit-learn, NumPy y TensorFlow.
        Debemos considerar que las funciones anidadas dentro de funcion_mayor no se ejecutan sino hasta que se llama esta primera, siendo muestra del scope o alcance de las funciones y si las llamamos obtendremos un error.
Setters, getters y decorador property

    Antes de comenzar me gustaría que analices el siguiente código:

        def funcion_decoradora(funcion):
            def wrapper():
                print("Este es el último mensaje...")
                funcion()
                print("Este es el primer mensaje ;)")
            return wrapper

        def zumbido():
            print("Buzzzzzz")

        zumbido = funcion_decoradora(zumbido)

    ¿Qué pasará si llamamos a la función zumbido()? si logras determinar el resultado de salida o entenderlo con detalle,
    entonces podemos seguir adelante.

    Lo que sucede es lo siguiente:

        >>> zumbido()
        Este es el último mensaje...
        Buzzzzzz
        Este es el primer mensaje ;)

    Si no diste con el resultado no te preocupes, solo hay que analizarlo con detalle y el truco está en la línea
    zumbido = funcion_decoradora(zumbido). Sucede que la función wrapper() recibió la la función zumbido() cómo 
    parámetro y coloca su salida entre los otros dos prints.

    Todo lo que sucede se conoce en programación como metaprogramación (metaprogramming), ya que una parte 
    del programa trata de modificara otra durante el tiempo de compilación. En tanto un decorador básicamente
    toma una función, le añade alguna funcionalidad y la retorna.

    Mejorando la sintaxis

    Definitivamente la forma en que decoramos la función es complejo, pero afortunadamente Python lo tiene 
    en cuenta y podemos utilizar decoradores con el símbolo @. Volviendo al mismo ejemplo de funcion_decoradora(),
    podemos simplificarlo así:

        @funcion_decoradora
        def zumbido():
            print("Buzzzzzz")
        
    En solo tres líneas de código tenemos el mismo resultado que escribir zumbido = funcion_decoradora(zumbido).

    ¿Qué son getters y setters?

    A diferencia de otros lenguajes de programación, en Python los getters y setters tienen el objetivo de asegurar 
    el encapsulamiento de datos. Cómo habrás visto, si declaramos una variable privada en Python al colocar un guión 
    bajo al inicio de esta (_) y normalmente son utilizados para: añadir lógica de validación al momento de obtener
    y definir un valor y, para evitar el acceso directo al campo de una clase.
    
    La realidad es que en Python no existen variables netamente privadas, pues aunque se declaren con un guión bajo
    podemos seguir accediendo a estas. En Programación Orientada a Objetos esto es peligroso, pues podemos alterar
    el método de alguna clase y tener efectos colaterales que afecten la lógica de nuestra aplicación.

    - Clases sin getters y setters
    Veamos un ejemplo con una clase que almacena un dato de distancia recorrida en millas (mi) y lo convierte a kilómetros (km):

        class Millas:
            def __init__(self, distancia = 0):
                self.distancia = distancia

            def convertir_a_kilometros(self):
                return (self.distancia * 1.609344)
       
     Ahora creemos un objeto que haga referencia a un viaje:

        # Creamos un nuevo objeto
        avion = Millas()

        # Indicamos la distancia
        avion.distancia = 200

        # Obtenemos el atributo distancia
        >>> print(avion.distancia)
        200

        # Obtenemos el método convertir_a_kilometros
        >>> print(avion.convertir_a_kilometros())
        321.8688


   -  Utilizando getters y setters

        Incluyamos un par de métodos para obtener la distancia y otro para que no acepte valores inferiores a cero,
        pues no tendría sentido que un vehículo recorra una distancia negativa. Estos son métodos getters y setters:

            class Millas:
                def __init__(self, distancia = 0):
                    self.distancia = distancia

                def convertir_a_kilometros(self):
                    return (self.distancia * 1.609344)

                # Método getter
                def obtener_distancia(self):
                    return self._distancia

                # Método setter
                def definir_distancia(self, valor):
                    if valor < 0:
                        raise ValueError("No es posible convertir distancias menores a 0.")
                    self._distancia = valor


        El método getter obtendrá el valor de la distancia que y el método setter se encargará de añadir una restricción.
        También debemos notar cómo distancia fue reemplazado por _distancia, denotando que es una variable privada.

        Si probamos nuestro código funcionará, la desventaja es que cualquier aplicación que hayamos creado con una base
        similar deberá ser actualizado. Esto no es nada escalable si tenemos cientos o miles de líneas de código.

    - Función property()
   
        Esta función está incluida en Python, en particular crea y retorna la propiedad de un objeto. La propiedad 
        de un objeto posee los métodos getter(), setter() y del().

        En tanto la función tiene cuatro atributos: property(fget, fset, fsel, fdoc) :

            fget : trae el valor de un atributo.
            fset : define el valor de un atributo.
            fdel : elimina el valor de un atributo.
            fdoc : crea un docstring por atributo.
            
    Veamos un ejemplo del mismo caso implementando la función property() :

        class Millas:
            def __init__(self):
                self._distancia = 0

            # Función para obtener el valor de _distancia
            def obtener_distancia(self):
                print("Llamada al método getter")
                return self._distancia

            # Función para definir el valor de _distancia
            def definir_distancia(self, recorrido):
                print("Llamada al método setter")
                self._distancia = recorrido

            # Función para eliminar el atributo _distancia
            def eliminar_distancia(self):
                del self._distancia

            distancia = property(obtener_distancia, definir_distancia, eliminar_distancia)


            # Creamos un nuevo objeto 
            avion = Millas()

            # Indicamos la distancia
            avion.distancia = 200

            # Obtenemos su atributo distancia
            >>> print(avion.distancia)
            Llamada al método getter
            Llamada al método setter
            200


    Aunque en este ejemplo hay una sola llamada a print, tenemos tres líneas como salida pues esta llama a los primeros dos métodos.
    Por lo que la propiedad distancia es una propiedad de objeto que ayuda a mantener el acceso de forma privada.

    
   -  Decorador @property
    Este decorador es uno de varios con los que ya cuenta Python, el cual nos permite utilizar getters y setters para hacer más fácil
    la implementación de la programación orientada a objetos en Python cambiando los métodos o atributos de las clases de forma que 
    no modifiquemos el código.
    
    Pero mejor veamos un ejemplo en acción:

        class Millas:
            def __init__(self):
                self._distancia = 0

            # Función para obtener el valor de _distancia
            # Usando el decorador property
            @property
            def obtener_distancia(self):
                print("Llamada al método getter")
                return self._distancia

            # Función para definir el valor de _distancia
            @obtener_distancia.setter
            def definir_distancia(self, valor)
                if valor < 0:
                    raise ValueError("No es posible convertir distancias menores a 0.")
                print("Llamada al método setter")
                self._distancia = valor

        # Creamos un nuevo objeto 
        avion = Millas()

        # Indicamos la distancia
        avion.distancia = 200

        # Obtenemos su atributo distancia
        >>> print(avion.distancia)
        Llamada al método getter
        Llamada al método setter
        200

    De esta manera usamos el decorador @property para utilizar getters y setters de una forma más prolija e incluimos una nueva funcionalidad 
    a nuestro método definir_distancia() , al mismo tiempo protegemos el acceso a nuestras variables privadas y cumplimos 
    con el principio de encapsulación.

    Reportar un problema
    Encapsulación, getters and setters
Encapsulación

    Permite agrupar datos y su comportamiento 
    Controla el acceso a dichos datos
    Previene modificaciones no autorizadas
Herencia

    * Permite modelas una jerarquia de objetos (clases)
    * Permite comparir comportamiento comun en la jerarquia.
    * Al padre se le conoce como superclases y al hijo como subclase.
Polimorfismo
  *Es la habilidad de tomar varias formas
  * En python nor permite cambiar el comportamiento de una superclase para adaptarlo en la subclase.
Complejidad algoritmica 
    * ¿Por que comparamos la eficiencia de un algoritmo? 
        Poruqe en la realidad ay billones de datos por analisar, a la hora de proceoss grandes la eficiencia es muy importante
    * Complejidad temporal vs complejodad espaial (procesamiento, espacio en memoria)
    * Podemos definirla como t(n)

    Aproximaciones 
        * Cronometrar el tempo en el que corre un algoritmo, (deoende de tu pc, o de los que se est ejecutando en tu pc)
        * Contar los pasos con una medida abstracta de operacion. (hacercandonos a infinito, como si nuestro data fuera enorme)
        * Contar los pasos conforme nos aproxia al infinito.

    Crecimiento asintotico (conforme un dato va a infinito)
        * No importan las variaciones pequeñas,
        * El enfoque se centra en lo que pasa confore el tamaño del problema se acerca al infinito.
        * Mejor de los casos, promedio, peor de los casos.
        * Big O notacion
        * Nada mas importa el termmino de mayor tamaño.

    Clases de complejidad algoritmicca
        * O(1) : Constante
        * O(n) : Lineal
        * O(Log n) : Logaritmica
        * O(n log n): Logaritmica Lineal
        * O(n**2): Polinomial o cuadratica
        * O(2**n): Exponencial
Algoritmos de busqueda y ordenacion:
    El objetivo es aplicar los metodos vistos de complejidad algoritimica, y saber que ahi diferentes algoritmos para poder 
    resolver problemas. 

    Busqueda Lineal
    * Busca en todos los elementos de manera secuencial
    * ¿Cual es el peor caso?

    Busqueda Binaria (solo para listas ordenadas)
        * Divide y conquista
        * El probelma se divide en 2 cada iteracion
        * ¿Cual es el peor caso?

    Ordenamiento de Burbuja:
        * El ordenmiento de burbjua es un algoritmo que reccore repetidamente una lista que necesita ordenarse.
          compara elementos adyacentes y los intercambia si estan en el oriden incorrecto.
          Este procedimiento se repite hasta que no se requeiran mas intercambios, lo que indica que la lista se 
          encuentra ordenada

        *Ver ejemplo de ordenamiento_burbuja.py

    Ordenamiento por inserción
      
        El ordenamiento por inserción es uno de los algoritmos más comunes que estudian
        los Científicos del Cómputo. Es intuitivo y fácil de implementar, pero es muy
        ineficiente para listas de gran tamaño.

        Una de las características del ordenamiento por inserción es que ordena en “su
        lugar.” Es decir, no requiere memoria adicional para realizar el ordenamiento
        ya que simplemente modifican los valores en memoria.

        La definición es simple:

            Una lista es dividida entre una sublista ordenada y otra sublista desordenada.
            Al principio, la sublista ordenada contiene un solo elemento, por lo que por
            definición se encuentra ordenada.

            A continuación se evalua el primer elemento dentro la sublista desordenada para
            que podamos insertarlo en el lugar correcto dentro de la lista ordenada.

            La inserción se realiza al mover todos los elementos mayores al elemento que
            se está evaluando un lugar a la derecha.

            Continua el proceso hasta que la sublista desordenada quede vacia y, por lo
            tanto, la lista se encontrará ordenada.

        Veamos un ejemplo:

            Imagina que tienes la siguiente lista de números:

                7, 3, 2, 9, 8

            Primero añadimos 7 a la sublista ordenada:

                7, 3, 2, 9, 8

            Ahora vemos el primer elemento de la sublista desordenada y lo guardamos en
            una variable para mantener el valor. A esa variable la llamaremos valor_actual.
            Verificamos que 3 es menor que 7, por lo que movemos 7 un lugar a la derecha.

                7, 7, 2, 9, 8 (valor_actual=3)

            3 es menor que 7, por lo que insertamos el valor en la primera posición.

                3, 7, 2, 9, 8

            Ahora vemos el número 2. 2 es menor que 7 por lo que lo movemos un espacio a la
            derecha y hacemos lo mismo con 3.

                3, 3, 7, 9, 8 (valor_actual=2)

            Ahora insertamos 2 en la primera posición.

                2, 3, 7, 9, 8

            9 es más grande que el valor más grande de nuestra sublista ordenada por lo que
            lo insertamos directamente en su posición.

                2, 3, 7, 9, 8

            El último valor es 8. 9 es más grande que 8 por lo que lo movemos a la derecha:

                2, 3, 7, 9, 9 (valor_actual=8)

            8 es más grande que 7, por lo que procedemos a insertar nuestro valor_actual.

                2, 3, 7, 8, 9

            Ahora la lista se encuentra ordenada y no quedan más elementos en la sublista
            desordenada.

           REVISAR ordenamiento_por_incercion.py

    Ordenamiento por mezcla:

        * El ordenamiento por mezcla es un algoritmo de divide y con quista.
        Primero divide una lista en partes iguales hasta que queden sublista de 1 a 0 elementos.
        Luego las recombina en forma ordenada.

        revidar ordenamiento_por_mezcla.py
Ambientes Virtuales 
    ¨* Necesitamos hambientes virtuales para no limitarnos con nuestro ambiente global
     * Permite aislar el ambiente para poder instalar diversas versiones de paquetes.
     * A partir de pyrhon 3 se incluye en la libreria estandar en el modulo venv
     * Ningun ingeniero profesional de Python trabaja sin ellos.

    Pip
    * Permite descargar paquetes de terceros para utilizar en nuestro programa.
    * Permite compartir nuestros paquetes con terceros.
    * Permite especificar la version del paquete que necesitamos. 
¿Porque graficar?

    * Reconocimiento de patrones
    * Prediccion en serie
    * Simplifica la interpretacion y las conclusiones acerca de los datos
     
    Graficado simple
        *Bokeh permite construir graficas compleas de manera rapida y con comandos simples
        * Permite exportar a varios formatos como html. notebooks, imagenes, etc.
        * Bokeh se puede utilizar en el servidor con Flask y Django
Introduccion a la optimizacion
    * El concepto de optimizacion permite resolver muchos problemas de manera computacional
    * Una funcion objetivo que debemos maximizar o minimizr
    * Una serie de limitntes que debemos respetar.

